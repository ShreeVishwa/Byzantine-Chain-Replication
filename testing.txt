Test Case : failure_free_config

1. Description : 
	No.of replicas = 2*2 + 1 = 5
	No. of Cients  = 2
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars')
	workload[1] = put('jedi,'luke skywalker); slice('jedi','0:4')
2. Name of configuration file used : failure_free_config.txt
3. Command to run the test case : python -m da main.da failure_free_config.txt
4. Name of the log file produced :  failure_free_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Pass

Test Case : stress_test_config

1. Description : 
	No.of replicas = 2*1 + 1 = 3
	No. of Cients  = 10
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = pseudorandom(233,90)
	workload[1] = pseudorandom(234,10)
	workload[2] = pseudorandom(235,1)
	workload[3] = pseudorandom(236,1)
	workload[4] = pseudorandom(237,1)
	workload[5] = pseudorandom(238,1)
	workload[6] = pseudorandom(239,1)
	workload[7] = pseudorandom(240,1)
	workload[8] = pseudorandom(241,1)
	workload[9] = pseudorandom(242,1)

2. Name of configuration file used : stress_test_config.txt
3. Command to run the test case : python -m da --message-buffer-size 4000000 main.da stress_test_config.txt
4. Name of the log file produced :  stress_test_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Pass

Test Case : client_request_fail_config

1. Description : 
	No.of replicas = 2*2 + 1 = 5
	No. of Cients  = 2
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars')
	workload[1] = put('jedi,'luke skywalker); slice('jedi','0:4')
	# FAILURE SCENARIO
	failures[0,0] = client_request(0,1), change_operation(); client_request(1,0), change_result();client_request(0,0), drop_result_stmt()
2. Name of configuration file used : fclient_request_fail_config.txt
3. Command to run the test case : python -m da main.da client_request_fail_config.txt
4. Name of the log file produced :  client_request_fail_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Client 0 : Fail as the operation is changed and result check at parent fails. Client 1 : Pass as only result is changed in head and code can tolerate 2 failures 



Test Case : result_shuttle_fail_config

1. Description : 
	No.of replicas = 2*2 + 1 = 5
	No. of Cients  = 2
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars')
	workload[1] = put('jedi,'luke skywalker); slice('jedi','0:4')
	workload[2] = put('k1','v1'); slice('k2','0:1')
	# FAILURE SCENARIO
	failures[0,3] = result_shuttle(0,1), change_operation()
	failures[0,1] = result_shuttle(1,0), change_result()
	failures[0,2] = result_shuttle(0,0), drop_result_stmt()
2. Name of configuration file used : result_shuttle_fail_config.txt
3. Command to run the test case : python -m da main.da result_shuttle_fail_config.txt
4. Name of the log file produced :  result_shuttle_fail_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Client 2 result check is failed at parent because when change_operation is triggered on replica 3, the replica changes the operation of client 2 request 1.Other 2 clients are passed

Test Case : shuttle_fail_config

1. Description : 
	No.of replicas = 2*2 + 1 = 5
	No. of Cients  = 2
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars')
	workload[1] = put('jedi,'luke skywalker); slice('jedi','0:4')
	workload[2] = put('k1','v1'); slice('k2','0:1')
	# FAILURE SCENARIO
	failures[0,3] = result_shuttle(0,1), change_operation()
	failures[0,1] = result_shuttle(1,0), change_result()
	failures[0,2] = result_shuttle(0,0), drop_result_stmt()
2. Name of configuration file used : shuttle_fail_config.txt
3. Command to run the test case : python -m da main.da shuttle_fail_config.txt
4. Name of the log file produced :  shuttle_fail_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Client 0 result check at parent is failed as we are changing the operation and validation at client itself fails and that result is not sent to parent

Test Case : forwarded_request_fail_config 

1. Description : 
	No.of replicas = 2*2 + 1 = 5
	No. of Cients  = 3
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars')
	workload[1] = put('jedi,'luke skywalker); slice('jedi','0:4')
	# FAILURE SCENARIO
	failures[0,0] = client_request(0,0),drop(); forwarded_request(0,0), drop_result_stmt() #Note : We have included drop() to stop the shuttle at head itself so that forwarded_request test scenario can be executed
2. Name of configuration file used : result_shuttle_fail_config.txt
3. Command to run the test case : python -m da main.da result_shuttle_fail_config.txt
4. Name of the log file produced :  result_shuttle_fail_config_log.txt
5. Programmatic check of correctness : A centralised parent process is used to collect the results from clients and check them with the contents of it's dictionary
6. Outcome : Client 0 result check is failed as the result of it's 0th request is dropped by head and it never reached client


