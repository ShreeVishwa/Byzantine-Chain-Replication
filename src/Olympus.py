# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import sys
import nacl.encoding
import nacl.hash
import nacl.signing
from nacl.bindings.utils import sodium_memcmp
from re import split
import time
import logging

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, config, c, r, parent, **rest_458):
        super().setup(config=config, c=c, r=r, parent=parent, **rest_458)
        self._state.config = config
        self._state.c = c
        self._state.r = r
        self._state.parent = parent
        self._state.config = self._state.config
        self._state.failure = dict()

    def run(self):
        logging.basicConfig(format='%(asctime)s : %(message)s', level=logging.INFO, filename=(sys.argv[(- 1)][0:(- 4)] + '_log.log'))
        head_timeout = (self._state.config['head_timeout'] / 1000)
        nonhead_timeout = (self._state.config['nonhead_timeout'] / 1000)
        client_timeout = (self._state.config['client_timeout'] / 1000)
        for x in self._state.config.keys():
            if x.startswith('failures'):
                self._state.failure[x[(- 2)]] = self._state.config[x].split(';')
        d = dict()
        a = False
        public_key_dict = dict()
        private_key_dict = dict()
        signing_key = nacl.signing.SigningKey.generate()
        public_key_dict[self._state.parent[0]] = signing_key.verify_key.encode(encoder=nacl.encoding.HexEncoder)
        private_key_dict[self._state.parent[0]] = signing_key
        for x in self._state.c:
            signing_key = nacl.signing.SigningKey.generate()
            public_key_dict[x] = signing_key.verify_key.encode(encoder=nacl.encoding.HexEncoder)
            private_key_dict[x] = signing_key
        logging.info('Olympus : Generated Signature keys for clients')
        for x in self._state.r:
            signing_key = nacl.signing.SigningKey.generate()
            public_key_dict[x] = signing_key.verify_key.encode(encoder=nacl.encoding.HexEncoder)
            private_key_dict[x] = signing_key
        logging.info('Olympus : Generated Signature keys for replicas')
        for x in self._state.r:
            self._setup(x, (a, d, self._state.r, self._state.c, public_key_dict, private_key_dict[x], nonhead_timeout, head_timeout, self._state.failure))
        for (i, x) in enumerate(self._state.c):
            self._setup(x, (self._state.config[(('workload[' + str(i)) + ']')], self._state.r, self._state.c, x, public_key_dict, private_key_dict[x], client_timeout, self._state.parent[0]))
        self._setup(self._state.parent, (self._state.c, public_key_dict, private_key_dict[self._state.parent[0]]))
        self._start(self._state.c)
        self._start(self._state.r)
        self._start(self._state.parent)
